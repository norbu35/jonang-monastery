---
import { Image } from "astro:assets";
import type { Header } from "../../payload-types";

import upArrow from "../assets/icons/up-arrow.svg";

let data: Header;
try {
  const response = await fetch(`${import.meta.env.CMS_API_URL}/globals/header`);
  if (!response.ok) {
    throw Error("error fetching data");
  }
  data = await response.json();
} catch (error: any) {
  throw Error(error.message);
}
---

<header
  id="header"
  class="opacity-1 fixed bottom-0 z-10 flex h-16 max-h-16 w-full flex-col justify-between border-t border-gray-300 bg-white p-2 transition md:top-0 md:h-20 md:max-h-20 md:justify-between md:shadow-lg lg:h-24 lg:max-h-24"
>
  <!-- Mobile menu -->
  <div
    id="menu"
    class="flex h-0 flex-col items-end overflow-hidden text-center font-semibold text-gray-600 transition"
  >
    <ul
      class="bottom-0 flex h-full w-full origin-bottom list-none flex-col items-center justify-center font-headerLinks"
    >
      {
        data.navigation.map((field) => (
          <li class="text-2xl">
            {field.page && typeof field.page !== "string" ? (
              <a href={`/${field.page.slug}`} class="hover:text-yellow-500">
                {field.page.title}
              </a>
            ) : field.url ? (
              <a href={field.url} target="_blank" class="hover:text-yellow-500">
                {field.linkLabel}
                <svg
                  class="inline"
                  width="18px"
                  height="18px"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g id="Interface / External_Link">
                    <path
                      id="Vector"
                      d="M10.0002 5H8.2002C7.08009 5 6.51962 5 6.0918 5.21799C5.71547 5.40973 5.40973 5.71547 5.21799 6.0918C5 6.51962 5 7.08009 5 8.2002V15.8002C5 16.9203 5 17.4801 5.21799 17.9079C5.40973 18.2842 5.71547 18.5905 6.0918 18.7822C6.5192 19 7.07899 19 8.19691 19H15.8031C16.921 19 17.48 19 17.9074 18.7822C18.2837 18.5905 18.5905 18.2839 18.7822 17.9076C19 17.4802 19 16.921 19 15.8031V14M20 9V4M20 4H15M20 4L13 11"
                      stroke="#000000"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </g>
                </svg>
              </a>
            ) : (
              <span>{field.label}</span>
            )}
            {field.sublinks?.length !== 0 && (
              <ul>
                {field.sublinks?.map((sublink) => (
                  <li class="list-none text-lg">
                    {sublink.page && typeof sublink.page !== "string" ? (
                      <a
                        href={`/${sublink.page.slug}`}
                        class="hover:text-yellow-500"
                      >
                        {sublink.page.title}
                      </a>
                    ) : (
                      <a
                        href={sublink.url}
                        target="_blank"
                        class="hover:text-yellow-500"
                      >
                        {sublink.linkLabel}
                        <svg
                          class="inline"
                          width="18px"
                          height="18px"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <g id="Interface / External_Link">
                            <path
                              id="Vector"
                              d="M10.0002 5H8.2002C7.08009 5 6.51962 5 6.0918 5.21799C5.71547 5.40973 5.40973 5.71547 5.21799 6.0918C5 6.51962 5 7.08009 5 8.2002V15.8002C5 16.9203 5 17.4801 5.21799 17.9079C5.40973 18.2842 5.71547 18.5905 6.0918 18.7822C6.5192 19 7.07899 19 8.19691 19H15.8031C16.921 19 17.48 19 17.9074 18.7822C18.2837 18.5905 18.5905 18.2839 18.7822 17.9076C19 17.4802 19 16.921 19 15.8031V14M20 9V4M20 4H15M20 4L13 11"
                              stroke="#000000"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </g>
                        </svg>
                      </a>
                    )}
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))
      }
      <button
        class="mt-12 h-[3rem] w-[8rem] rounded bg-yellow-500 text-xl text-white drop-shadow-lg hover:bg-yellow-600"
        >Donate</button
      >
    </ul>
  </div>
  <div class="flex h-[48px] w-full items-center justify-between md:h-full">
    <!-- Logo -->
    <div class="basis-3/4 md:basis-1/3">
      <a href="/" class="flex items-center justify-start gap-4">
        <div class="md:w-18 w-16 lg:w-20">
          {
            typeof data.logo !== "string" ? (
              <Image
                src={data!.logo.url!}
                alt={data.logo.alt}
                width={data.logo.width!}
                height={data.logo.height!}
                class="float-right w-[80%]"
              />
            ) : (
              <div>Error fetching data</div>
            )
          }
        </div>
        <div class="font-siteTitle text-[18px] leading-6 text-gray-700 lg:text-[24px] lg:leading-8">
          Jonang Takten<br /> Phuntsok Choeling
        </div>
      </a>
    </div>
    <!-- Large menu -->
    <div
      id="menu"
      class="mr-2 hidden h-0 items-center font-semibold text-gray-600 md:flex md:h-full xl:mr-12 xl:text-[18px]"
    >
      <ul
        id="nav"
        class="my-0 h-full list-none items-center justify-evenly gap-3 font-headerLinks text-[16px] md:flex lg:gap-4 lg:text-xl xl:gap-6"
      >
        {
          data.navigation.map((field: any) => (
            <li class="group flex h-full items-center justify-center">
              {field.page && typeof field.page !== "string" ? (
                <a href={`/${field.page.slug}`} class="hover:text-yellow-500">
                  {field.page.title}
                </a>
              ) : field.url ? (
                <a
                  href={field.url}
                  target="_blank"
                  class="hover:text-yellow-500"
                >
                  {field.linkLabel}
                </a>
              ) : (
                <span>{field.label}</span>
              )}
              <!-- Submenu -->
              {field.sublinks?.length !== 0 && (
                <ul class="group absolute -left-full -top-full flex flex-col gap-2 bg-white px-8 pb-4 pt-8 opacity-0 transition-opacity duration-200 ease-linear group-hover:left-[initial] group-hover:top-[60px] group-hover:opacity-100 lg:top-[66px] lg:px-6 lg:pb-6 lg:pt-10 lg:pt-12">
                  {field.sublinks?.map((sublink: any) => (
                    <li class="list-none text-lg">
                      {sublink.page && typeof sublink.page !== "string" ? (
                        <a
                          href={`/${sublink.page.slug}`}
                          class="hover:text-yellow-500"
                        >
                          {sublink.page.title}
                        </a>
                      ) : (
                        <a
                          href={sublink.url}
                          target="_blank"
                          class="hover:text-yellow-500"
                        >
                          {sublink.linkLabel}
                          <svg
                            class="inline"
                            width="18px"
                            height="18px"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <g id="Interface / External_Link">
                              <path
                                id="Vector"
                                d="M10.0002 5H8.2002C7.08009 5 6.51962 5 6.0918 5.21799C5.71547 5.40973 5.40973 5.71547 5.21799 6.0918C5 6.51962 5 7.08009 5 8.2002V15.8002C5 16.9203 5 17.4801 5.21799 17.9079C5.40973 18.2842 5.71547 18.5905 6.0918 18.7822C6.5192 19 7.07899 19 8.19691 19H15.8031C16.921 19 17.48 19 17.9074 18.7822C18.2837 18.5905 18.5905 18.2839 18.7822 17.9076C19 17.4802 19 16.921 19 15.8031V14M20 9V4M20 4H15M20 4L13 11"
                                stroke="#000000"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </g>
                          </svg>
                        </a>
                      )}
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))
        }
        <button
          class="h-10 w-28 rounded bg-yellow-500 text-gray-700 drop-shadow-lg hover:bg-yellow-600 lg:h-12"
          >Donate</button
        >
      </ul>
    </div>
    <div class="flex items-center gap-4 md:hidden">
      <button
        class="hide max-h-[35px] transition-all duration-500 ease-in-out motion-reduce:transition-none"
        id="topButton"><Image src={upArrow} alt="Up arrow icon" /></button
      >
      <button id="menuButton" class="group relative">
        <div
          class="relative flex h-[50px] w-[50px] transform items-center justify-center overflow-hidden transition-all duration-200"
        >
          <div
            class="duration-30 transition-all0 flex h-[21px] w-[28px] origin-center transform flex-col justify-between overflow-hidden"
          >
            <div
              class="h-[3px] w-9 origin-left transform rounded-xl bg-black transition-all duration-300 group-focus:translate-x-10"
            >
            </div>
            <div
              class="h-[3px] w-9 transform rounded-xl bg-black transition-all delay-75 duration-300 group-focus:translate-x-10"
            >
            </div>
            <div
              class="h-[3px] w-9 origin-left transform rounded-xl bg-black transition-all delay-150 duration-300 group-focus:translate-x-10"
            >
            </div>

            <div
              class="absolute top-2.5 flex w-0 -translate-x-10 transform items-center justify-between transition-all duration-500 group-focus:w-14 group-focus:translate-x-0"
            >
              <div
                class="absolute h-[3px] w-7 rotate-0 transform bg-black transition-all delay-300 duration-500 group-focus:rotate-45"
              >
              </div>
              <div
                class="absolute h-[3px] w-7 -rotate-0 transform bg-black transition-all delay-300 duration-500 group-focus:-rotate-45"
              >
              </div>
            </div>
          </div>
        </div>
      </button>
    </div>
  </div>
</header>

<script>
  const header = document.querySelector("#header")!;
  const menu = document.querySelector("#menu") as HTMLDivElement;
  const nav = document.querySelector("#nav")!;
  const menuButton: HTMLElement = document.querySelector("#menuButton")!;
  const topButton = document.querySelector("#topButton")!;

  let prevScrollPos = window.scrollY;

  function handleScroll() {
    const currentScrollPos = window.scrollY;
    const scrollingUp = currentScrollPos < prevScrollPos;

    header.classList.toggle("hide", !scrollingUp);
    header.setAttribute("aria-hidden", scrollingUp ? "false" : "true");

    prevScrollPos = currentScrollPos;

    topButton.classList.toggle(
      "hide",
      currentScrollPos <= window.innerHeight / 2,
    );
  }

  function scrollToTop() {
    scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleMenu() {
    const isMenuOpen = header.classList.contains("h-screen");

    if (!isMenuOpen) {
      document.body.classList.add("stop-scrolling");
      header.classList.add("h-screen", "max-h-full");
      menu.classList.add("h-full");
      menu.addEventListener("click", handleMenuClick);
    } else {
      document.body.classList.remove("stop-scrolling");
      menuButton.blur();
      menu.classList.remove("h-full");
      header.classList.remove("h-screen", "max-h-full");
      setTimeout(() => {
        header.classList.add("max-h-16");
      }, 500);
    }
  }

  function handleMenuClick(event: MouseEvent) {
    const clickedElement = event.target as HTMLElement;

    const isLiClick =
      clickedElement.tagName === "LI" ||
      clickedElement.closest("li") ||
      clickedElement.tagName === "BUTTON";

    if (!isLiClick && nav && !nav.contains(clickedElement)) {
      toggleMenu();
    }
  }

  window.addEventListener("scroll", handleScroll);
  topButton.addEventListener("click", scrollToTop);
  menuButton.addEventListener("click", toggleMenu);
</script>
